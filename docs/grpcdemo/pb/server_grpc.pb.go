// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerDemoClient is the client API for ServerDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerDemoClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	ProcessData(ctx context.Context, in *ProcessDataReq, opts ...grpc.CallOption) (*ProcessDataResp, error)
}

type serverDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewServerDemoClient(cc grpc.ClientConnInterface) ServerDemoClient {
	return &serverDemoClient{cc}
}

func (c *serverDemoClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/proto.ServerDemo/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDemoClient) ProcessData(ctx context.Context, in *ProcessDataReq, opts ...grpc.CallOption) (*ProcessDataResp, error) {
	out := new(ProcessDataResp)
	err := c.cc.Invoke(ctx, "/proto.ServerDemo/processData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerDemoServer is the server API for ServerDemo service.
// All implementations must embed UnimplementedServerDemoServer
// for forward compatibility
type ServerDemoServer interface {
	Get(context.Context, *GetReq) (*GetResp, error)
	ProcessData(context.Context, *ProcessDataReq) (*ProcessDataResp, error)
	mustEmbedUnimplementedServerDemoServer()
}

// UnimplementedServerDemoServer must be embedded to have forward compatible implementations.
type UnimplementedServerDemoServer struct {
}

func (UnimplementedServerDemoServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServerDemoServer) ProcessData(context.Context, *ProcessDataReq) (*ProcessDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessData not implemented")
}
func (UnimplementedServerDemoServer) mustEmbedUnimplementedServerDemoServer() {}

// UnsafeServerDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerDemoServer will
// result in compilation errors.
type UnsafeServerDemoServer interface {
	mustEmbedUnimplementedServerDemoServer()
}

func RegisterServerDemoServer(s grpc.ServiceRegistrar, srv ServerDemoServer) {
	s.RegisterService(&ServerDemo_ServiceDesc, srv)
}

func _ServerDemo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDemoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServerDemo/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDemoServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDemo_ProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDemoServer).ProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServerDemo/processData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDemoServer).ProcessData(ctx, req.(*ProcessDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerDemo_ServiceDesc is the grpc.ServiceDesc for ServerDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServerDemo",
	HandlerType: (*ServerDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _ServerDemo_Get_Handler,
		},
		{
			MethodName: "processData",
			Handler:    _ServerDemo_ProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
