// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: install.proto

package tools

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToolsServerClient is the client API for ToolsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolsServerClient interface {
	InstallPackageStreamingMessage(ctx context.Context, in *InstallPackageReq, opts ...grpc.CallOption) (ToolsServer_InstallPackageStreamingMessageClient, error)
	SetTaskStreamingMessage(ctx context.Context, in *SetTaskReq, opts ...grpc.CallOption) (ToolsServer_SetTaskStreamingMessageClient, error)
}

type toolsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewToolsServerClient(cc grpc.ClientConnInterface) ToolsServerClient {
	return &toolsServerClient{cc}
}

func (c *toolsServerClient) InstallPackageStreamingMessage(ctx context.Context, in *InstallPackageReq, opts ...grpc.CallOption) (ToolsServer_InstallPackageStreamingMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ToolsServer_ServiceDesc.Streams[0], "/tools.ToolsServer/InstallPackageStreamingMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &toolsServerInstallPackageStreamingMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ToolsServer_InstallPackageStreamingMessageClient interface {
	Recv() (*InstallPackageRes, error)
	grpc.ClientStream
}

type toolsServerInstallPackageStreamingMessageClient struct {
	grpc.ClientStream
}

func (x *toolsServerInstallPackageStreamingMessageClient) Recv() (*InstallPackageRes, error) {
	m := new(InstallPackageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *toolsServerClient) SetTaskStreamingMessage(ctx context.Context, in *SetTaskReq, opts ...grpc.CallOption) (ToolsServer_SetTaskStreamingMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ToolsServer_ServiceDesc.Streams[1], "/tools.ToolsServer/SetTaskStreamingMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &toolsServerSetTaskStreamingMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ToolsServer_SetTaskStreamingMessageClient interface {
	Recv() (*SetTaskRes, error)
	grpc.ClientStream
}

type toolsServerSetTaskStreamingMessageClient struct {
	grpc.ClientStream
}

func (x *toolsServerSetTaskStreamingMessageClient) Recv() (*SetTaskRes, error) {
	m := new(SetTaskRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ToolsServerServer is the server API for ToolsServer service.
// All implementations must embed UnimplementedToolsServerServer
// for forward compatibility
type ToolsServerServer interface {
	InstallPackageStreamingMessage(*InstallPackageReq, ToolsServer_InstallPackageStreamingMessageServer) error
	SetTaskStreamingMessage(*SetTaskReq, ToolsServer_SetTaskStreamingMessageServer) error
	mustEmbedUnimplementedToolsServerServer()
}

// UnimplementedToolsServerServer must be embedded to have forward compatible implementations.
type UnimplementedToolsServerServer struct {
}

func (UnimplementedToolsServerServer) InstallPackageStreamingMessage(*InstallPackageReq, ToolsServer_InstallPackageStreamingMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallPackageStreamingMessage not implemented")
}
func (UnimplementedToolsServerServer) SetTaskStreamingMessage(*SetTaskReq, ToolsServer_SetTaskStreamingMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTaskStreamingMessage not implemented")
}
func (UnimplementedToolsServerServer) mustEmbedUnimplementedToolsServerServer() {}

// UnsafeToolsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolsServerServer will
// result in compilation errors.
type UnsafeToolsServerServer interface {
	mustEmbedUnimplementedToolsServerServer()
}

func RegisterToolsServerServer(s grpc.ServiceRegistrar, srv ToolsServerServer) {
	s.RegisterService(&ToolsServer_ServiceDesc, srv)
}

func _ToolsServer_InstallPackageStreamingMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallPackageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToolsServerServer).InstallPackageStreamingMessage(m, &toolsServerInstallPackageStreamingMessageServer{stream})
}

type ToolsServer_InstallPackageStreamingMessageServer interface {
	Send(*InstallPackageRes) error
	grpc.ServerStream
}

type toolsServerInstallPackageStreamingMessageServer struct {
	grpc.ServerStream
}

func (x *toolsServerInstallPackageStreamingMessageServer) Send(m *InstallPackageRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ToolsServer_SetTaskStreamingMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetTaskReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToolsServerServer).SetTaskStreamingMessage(m, &toolsServerSetTaskStreamingMessageServer{stream})
}

type ToolsServer_SetTaskStreamingMessageServer interface {
	Send(*SetTaskRes) error
	grpc.ServerStream
}

type toolsServerSetTaskStreamingMessageServer struct {
	grpc.ServerStream
}

func (x *toolsServerSetTaskStreamingMessageServer) Send(m *SetTaskRes) error {
	return x.ServerStream.SendMsg(m)
}

// ToolsServer_ServiceDesc is the grpc.ServiceDesc for ToolsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tools.ToolsServer",
	HandlerType: (*ToolsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallPackageStreamingMessage",
			Handler:       _ToolsServer_InstallPackageStreamingMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetTaskStreamingMessage",
			Handler:       _ToolsServer_SetTaskStreamingMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "install.proto",
}
