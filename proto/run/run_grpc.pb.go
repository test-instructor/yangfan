// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: run.proto

package run

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunCaseClient is the client API for RunCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunCaseClient interface {
	RunApi(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
	RunStep(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
	RunCase(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
	RunBoomerDebug(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
	RunTimerTask(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
	RunTimerTag(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error)
}

type runCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewRunCaseClient(cc grpc.ClientConnInterface) RunCaseClient {
	return &runCaseClient{cc}
}

func (c *runCaseClient) RunApi(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCaseClient) RunStep(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCaseClient) RunCase(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCaseClient) RunBoomerDebug(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunBoomerDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCaseClient) RunTimerTask(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunTimerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCaseClient) RunTimerTag(ctx context.Context, in *RunCaseReq, opts ...grpc.CallOption) (*RunCaseResponse, error) {
	out := new(RunCaseResponse)
	err := c.cc.Invoke(ctx, "/run.RunCase/RunTimerTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunCaseServer is the server API for RunCase service.
// All implementations must embed UnimplementedRunCaseServer
// for forward compatibility
type RunCaseServer interface {
	RunApi(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	RunStep(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	RunCase(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	RunBoomerDebug(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	RunTimerTask(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	RunTimerTag(context.Context, *RunCaseReq) (*RunCaseResponse, error)
	mustEmbedUnimplementedRunCaseServer()
}

// UnimplementedRunCaseServer must be embedded to have forward compatible implementations.
type UnimplementedRunCaseServer struct {
}

func (UnimplementedRunCaseServer) RunApi(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunApi not implemented")
}
func (UnimplementedRunCaseServer) RunStep(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunStep not implemented")
}
func (UnimplementedRunCaseServer) RunCase(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCase not implemented")
}
func (UnimplementedRunCaseServer) RunBoomerDebug(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBoomerDebug not implemented")
}
func (UnimplementedRunCaseServer) RunTimerTask(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTimerTask not implemented")
}
func (UnimplementedRunCaseServer) RunTimerTag(context.Context, *RunCaseReq) (*RunCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTimerTag not implemented")
}
func (UnimplementedRunCaseServer) mustEmbedUnimplementedRunCaseServer() {}

// UnsafeRunCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunCaseServer will
// result in compilation errors.
type UnsafeRunCaseServer interface {
	mustEmbedUnimplementedRunCaseServer()
}

func RegisterRunCaseServer(s grpc.ServiceRegistrar, srv RunCaseServer) {
	s.RegisterService(&RunCase_ServiceDesc, srv)
}

func _RunCase_RunApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunApi(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCase_RunStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunStep(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCase_RunCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunCase(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCase_RunBoomerDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunBoomerDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunBoomerDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunBoomerDebug(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCase_RunTimerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunTimerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunTimerTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunTimerTask(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCase_RunTimerTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCaseServer).RunTimerTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.RunCase/RunTimerTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCaseServer).RunTimerTag(ctx, req.(*RunCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RunCase_ServiceDesc is the grpc.ServiceDesc for RunCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "run.RunCase",
	HandlerType: (*RunCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunApi",
			Handler:    _RunCase_RunApi_Handler,
		},
		{
			MethodName: "RunStep",
			Handler:    _RunCase_RunStep_Handler,
		},
		{
			MethodName: "RunCase",
			Handler:    _RunCase_RunCase_Handler,
		},
		{
			MethodName: "RunBoomerDebug",
			Handler:    _RunCase_RunBoomerDebug_Handler,
		},
		{
			MethodName: "RunTimerTask",
			Handler:    _RunCase_RunTimerTask_Handler,
		},
		{
			MethodName: "RunTimerTag",
			Handler:    _RunCase_RunTimerTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "run.proto",
}
